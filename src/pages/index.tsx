import { useAutoAnimate } from "@formkit/auto-animate/react";
import { type NextPage } from "next";
import Head from "next/head";
import type { LegacyRef } from "react";
import React, { useState } from "react";
import { DebouncedInput } from "../components/debounced-input";
import { LoadingIndicator } from "../components/loading-indicator";
import { SearchResultItem } from "../components/search-result-item";

import { trpc } from "../utils/trpc";

const Home: NextPage = () => {

  const [searchQuery, setSearchQuery] = useState("");
  const { data: stations, isFetching } = trpc.location.byFuzzyName.useQuery({ query: searchQuery },
    { enabled: searchQuery.length > 0, staleTime: Infinity }
  );

  console.log(stations)

  const [parent] = useAutoAnimate({ duration: 400 })

  return (
    <>
      <Head>
        <title>VBB Departures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="w-full mx-auto flex min-h-screen flex-col items-center justify-center bg-slate-300">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          <span className="text-red-600">VBB</span> Departures
        </h1>
        <DebouncedInput value={searchQuery} onChange={setSearchQuery} placeholder="Station Name" />
        <div ref={parent as LegacyRef<HTMLDivElement>} className="bg-white flex flex-col max-h-96 overflow-y-scroll gap-1 mt-4 shadow-lg rounded-lg lg:w-1/3 w-3/4 divide-y divide-dashed">
          {isFetching ? <LoadingIndicator /> :
            (stations?.length || 0) > 0 ? stations?.map(s => <SearchResultItem key={s.id} location={s} />) : null
          }
        </div>
      </main>
    </>
  );
};

export default Home;